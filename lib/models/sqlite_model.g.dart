// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'sqlite_model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Menu.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Menu TABLE
class TableMenu extends SqfEntityTableBase {
  TableMenu() {
    // declare properties of EntityTable
    tableName = 'menu';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('namaMenu', DbType.text),
      SqfEntityFieldBase('namaKategori', DbType.text),
      SqfEntityFieldBase('hargaMenu', DbType.text),
      SqfEntityFieldBase('gambarMenu', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMenu();
  }
}

// Keranjang TABLE
class TableKeranjang extends SqfEntityTableBase {
  TableKeranjang() {
    // declare properties of EntityTable
    tableName = 'keranjang';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer, isPrimaryKeyField: true),
      SqfEntityFieldBase('namaMenu', DbType.text),
      SqfEntityFieldBase('namaKategori', DbType.text),
      SqfEntityFieldBase('hargaMenu', DbType.text),
      SqfEntityFieldBase('gambarMenu', DbType.text),
      SqfEntityFieldBase('jumlahItem', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableKeranjang();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class DBModel extends SqfEntityModelProvider {
  DBModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    preSaveAction = dbModel.preSaveAction;
    logFunction = dbModel.logFunction;
    databaseTables = [
      TableMenu.getInstance,
      TableKeranjang.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = dbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Menu
class Menu extends TableBase {
  Menu(
      {this.id,
      this.namaMenu,
      this.namaKategori,
      this.hargaMenu,
      this.gambarMenu}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Menu.withFields(
      this.namaMenu, this.namaKategori, this.hargaMenu, this.gambarMenu) {
    _setDefaultValues();
  }
  Menu.withId(this.id, this.namaMenu, this.namaKategori, this.hargaMenu,
      this.gambarMenu) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Menu.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['namaMenu'] != null) {
      namaMenu = o['namaMenu'].toString();
    }
    if (o['namaKategori'] != null) {
      namaKategori = o['namaKategori'].toString();
    }
    if (o['hargaMenu'] != null) {
      hargaMenu = o['hargaMenu'].toString();
    }
    if (o['gambarMenu'] != null) {
      gambarMenu = o['gambarMenu'].toString();
    }
  }
  // FIELDS (Menu)
  int? id;
  String? namaMenu;
  String? namaKategori;
  String? hargaMenu;
  String? gambarMenu;

  // end FIELDS (Menu)

  static const bool _softDeleteActivated = false;
  MenuManager? __mnMenu;

  MenuManager get _mnMenu {
    return __mnMenu = __mnMenu ?? MenuManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (namaMenu != null || !forView) {
      map['namaMenu'] = namaMenu;
    }
    if (namaKategori != null || !forView) {
      map['namaKategori'] = namaKategori;
    }
    if (hargaMenu != null || !forView) {
      map['hargaMenu'] = hargaMenu;
    }
    if (gambarMenu != null || !forView) {
      map['gambarMenu'] = gambarMenu;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (namaMenu != null || !forView) {
      map['namaMenu'] = namaMenu;
    }
    if (namaKategori != null || !forView) {
      map['namaKategori'] = namaKategori;
    }
    if (hargaMenu != null || !forView) {
      map['hargaMenu'] = hargaMenu;
    }
    if (gambarMenu != null || !forView) {
      map['gambarMenu'] = gambarMenu;
    }

    return map;
  }

  /// This method returns Json String [Menu]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Menu]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [namaMenu, namaKategori, hargaMenu, gambarMenu];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, namaMenu, namaKategori, hargaMenu, gambarMenu];
  }

  static Future<List<Menu>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Menu.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Menu>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Menu>[];
    try {
      objList = list
          .map((menu) => Menu.fromMap(menu as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Menu.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Menu>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Menu> objList = <Menu>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Menu.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Menu by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Menu] if exist, otherwise returns null
  Future<Menu?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Menu? obj;
    final data = await _mnMenu.getById([id]);
    if (data.length != 0) {
      obj = Menu.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Menu) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMenu.insert(this, ignoreBatch);
    } else {
      await _mnMenu.update(this);
    }

    return id;
  }

  /// Saves the (Menu) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMenu.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMenu.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Menu. Returns a new Primary Key value of Menu

  /// <returns>Returns a new Primary Key value of Menu
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Menu> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Menu> menus,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DBModel().batchStart();
    for (final obj in menus) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await DBModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < menus.length; i++) {
        if (menus[i].id == null) {
          menus[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnMenu.rawInsert(
          'INSERT OR REPLACE INTO menu (id, namaMenu, namaKategori, hargaMenu, gambarMenu)  VALUES (?,?,?,?,?)',
          [id, namaMenu, namaKategori, hargaMenu, gambarMenu],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Menu id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Menu id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Menu Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Menu>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Menu> menus,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnMenu.rawInsertAll(
        'INSERT OR REPLACE INTO menu (id, namaMenu, namaKategori, hargaMenu, gambarMenu)  VALUES (?,?,?,?,?)',
        menus,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Menu

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Menu invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnMenu
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnMenu.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    const msg =
        'set useSoftDeleting:true in the table definition of [Menu] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  MenuFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MenuFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  MenuFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MenuFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion menu

// region MenuField
class MenuField extends FilterBase {
  MenuField(MenuFilterBuilder menuFB) : super(menuFB);

  @override
  MenuFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder isNull() {
    return super.isNull() as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as MenuFilterBuilder;
  }

  @override
  MenuFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as MenuFilterBuilder;
  }

  @override
  MenuField get not {
    return super.not as MenuField;
  }
}
// endregion MenuField

// region MenuFilterBuilder
class MenuFilterBuilder extends ConjunctionBase {
  MenuFilterBuilder(Menu obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnMenu = obj._mnMenu;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  MenuManager? _mnMenu;

  /// put the sql keyword 'AND'
  @override
  MenuFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  MenuFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  MenuFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  MenuFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  MenuFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  MenuFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  MenuFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MenuFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MenuFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MenuFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MenuFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  MenuField _setField(MenuField? field, String colName, DbType dbtype) {
    return MenuField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  MenuField? _id;
  MenuField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  MenuField? _namaMenu;
  MenuField get namaMenu {
    return _namaMenu = _setField(_namaMenu, 'namaMenu', DbType.text);
  }

  MenuField? _namaKategori;
  MenuField get namaKategori {
    return _namaKategori =
        _setField(_namaKategori, 'namaKategori', DbType.text);
  }

  MenuField? _hargaMenu;
  MenuField get hargaMenu {
    return _hargaMenu = _setField(_hargaMenu, 'hargaMenu', DbType.text);
  }

  MenuField? _gambarMenu;
  MenuField get gambarMenu {
    return _gambarMenu = _setField(_gambarMenu, 'gambarMenu', DbType.text);
  }

  /// Deletes List<Menu> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnMenu!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnMenu!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from menu ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnMenu!.updateBatch(qparams, values);
  }

  /// This method always returns [Menu] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Menu?
  @override
  Future<Menu?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnMenu!.toList(qparams);
    final data = await objFuture;
    Menu? obj;
    if (data.isNotEmpty) {
      obj = Menu.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Menu]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Menu?
  @override
  Future<Menu> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Menu();
  }

  /// This method returns int. [Menu]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? menuCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final menusFuture = await _mnMenu!.toList(qparams);
    final int count = menusFuture[0]['CNT'] as int;
    if (menuCount != null) {
      menuCount(count);
    }
    return count;
  }

  /// This method returns List<Menu> [Menu]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Menu>
  @override
  Future<List<Menu>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Menu> menusData = await Menu.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return menusData;
  }

  /// This method returns Json String [Menu]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Menu]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Menu]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnMenu!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Menu]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    retVal['sql'] = 'SELECT `id` FROM menu WHERE ${qparams.whereString}';
    retVal['args'] = qparams.whereArguments;
    return retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnMenu!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Menu]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnMenu!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Menu.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnMenu!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MenuFilterBuilder

// region MenuFields
class MenuFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fNamaMenu;
  static TableField get namaMenu {
    return _fNamaMenu =
        _fNamaMenu ?? SqlSyntax.setField(_fNamaMenu, 'namaMenu', DbType.text);
  }

  static TableField? _fNamaKategori;
  static TableField get namaKategori {
    return _fNamaKategori = _fNamaKategori ??
        SqlSyntax.setField(_fNamaKategori, 'namaKategori', DbType.text);
  }

  static TableField? _fHargaMenu;
  static TableField get hargaMenu {
    return _fHargaMenu = _fHargaMenu ??
        SqlSyntax.setField(_fHargaMenu, 'hargaMenu', DbType.text);
  }

  static TableField? _fGambarMenu;
  static TableField get gambarMenu {
    return _fGambarMenu = _fGambarMenu ??
        SqlSyntax.setField(_fGambarMenu, 'gambarMenu', DbType.text);
  }
}
// endregion MenuFields

//region MenuManager
class MenuManager extends SqfEntityProvider {
  MenuManager()
      : super(DBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'menu';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion MenuManager
// region Keranjang
class Keranjang extends TableBase {
  Keranjang(
      {this.id,
      this.namaMenu,
      this.namaKategori,
      this.hargaMenu,
      this.gambarMenu,
      this.jumlahItem}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Keranjang.withFields(this.id, this.namaMenu, this.namaKategori,
      this.hargaMenu, this.gambarMenu, this.jumlahItem) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Keranjang.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['namaMenu'] != null) {
      namaMenu = o['namaMenu'].toString();
    }
    if (o['namaKategori'] != null) {
      namaKategori = o['namaKategori'].toString();
    }
    if (o['hargaMenu'] != null) {
      hargaMenu = o['hargaMenu'].toString();
    }
    if (o['gambarMenu'] != null) {
      gambarMenu = o['gambarMenu'].toString();
    }
    if (o['jumlahItem'] != null) {
      jumlahItem = o['jumlahItem'].toString();
    }
  }
  // FIELDS (Keranjang)
  int? id;
  String? namaMenu;
  String? namaKategori;
  String? hargaMenu;
  String? gambarMenu;
  String? jumlahItem;

  // end FIELDS (Keranjang)

  static const bool _softDeleteActivated = false;
  KeranjangManager? __mnKeranjang;

  KeranjangManager get _mnKeranjang {
    return __mnKeranjang = __mnKeranjang ?? KeranjangManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (id != null || !forView) {
      map['id'] = id;
    }
    if (namaMenu != null || !forView) {
      map['namaMenu'] = namaMenu;
    }
    if (namaKategori != null || !forView) {
      map['namaKategori'] = namaKategori;
    }
    if (hargaMenu != null || !forView) {
      map['hargaMenu'] = hargaMenu;
    }
    if (gambarMenu != null || !forView) {
      map['gambarMenu'] = gambarMenu;
    }
    if (jumlahItem != null || !forView) {
      map['jumlahItem'] = jumlahItem;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (id != null || !forView) {
      map['id'] = id;
    }
    if (namaMenu != null || !forView) {
      map['namaMenu'] = namaMenu;
    }
    if (namaKategori != null || !forView) {
      map['namaKategori'] = namaKategori;
    }
    if (hargaMenu != null || !forView) {
      map['hargaMenu'] = hargaMenu;
    }
    if (gambarMenu != null || !forView) {
      map['gambarMenu'] = gambarMenu;
    }
    if (jumlahItem != null || !forView) {
      map['jumlahItem'] = jumlahItem;
    }

    return map;
  }

  /// This method returns Json String [Keranjang]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Keranjang]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [id, namaMenu, namaKategori, hargaMenu, gambarMenu, jumlahItem];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, id, namaMenu, namaKategori, hargaMenu, gambarMenu, jumlahItem];
  }

  static Future<List<Keranjang>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Keranjang.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Keranjang>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Keranjang>[];
    try {
      objList = list
          .map((keranjang) =>
              Keranjang.fromMap(keranjang as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Keranjang.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Keranjang>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Keranjang> objList = <Keranjang>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Keranjang.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Keranjang by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Keranjang] if exist, otherwise returns null
  Future<Keranjang?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Keranjang? obj;
    final data = await _mnKeranjang.getById([id]);
    if (data.length != 0) {
      obj = Keranjang.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Keranjang) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnKeranjang.insert(this, ignoreBatch);
    } else {
      await _mnKeranjang.update(this);
    }

    return id;
  }

  /// Saves the (Keranjang) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnKeranjang.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnKeranjang.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Keranjang. Returns a new Primary Key value of Keranjang

  /// <returns>Returns a new Primary Key value of Keranjang
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Keranjang> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Keranjang> keranjangs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DBModel().batchStart();
    for (final obj in keranjangs) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await DBModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < keranjangs.length; i++) {
        if (keranjangs[i].id == null) {
          keranjangs[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnKeranjang.rawInsert(
          'INSERT OR REPLACE INTO keranjang (id, id, namaMenu, namaKategori, hargaMenu, gambarMenu, jumlahItem)  VALUES (?,?,?,?,?,?,?)',
          [id, id, namaMenu, namaKategori, hargaMenu, gambarMenu, jumlahItem],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Keranjang id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Keranjang id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Keranjang Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Keranjang>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Keranjang> keranjangs,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnKeranjang.rawInsertAll(
        'INSERT OR REPLACE INTO keranjang (id, id, namaMenu, namaKategori, hargaMenu, gambarMenu, jumlahItem)  VALUES (?,?,?,?,?,?,?)',
        keranjangs,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Keranjang

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Keranjang invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnKeranjang
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnKeranjang.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    const msg =
        'set useSoftDeleting:true in the table definition of [Keranjang] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  KeranjangFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return KeranjangFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  KeranjangFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return KeranjangFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion keranjang

// region KeranjangField
class KeranjangField extends FilterBase {
  KeranjangField(KeranjangFilterBuilder keranjangFB) : super(keranjangFB);

  @override
  KeranjangFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder isNull() {
    return super.isNull() as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as KeranjangFilterBuilder;
  }

  @override
  KeranjangField get not {
    return super.not as KeranjangField;
  }
}
// endregion KeranjangField

// region KeranjangFilterBuilder
class KeranjangFilterBuilder extends ConjunctionBase {
  KeranjangFilterBuilder(Keranjang obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnKeranjang = obj._mnKeranjang;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  KeranjangManager? _mnKeranjang;

  /// put the sql keyword 'AND'
  @override
  KeranjangFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  KeranjangFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  KeranjangFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  KeranjangFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  KeranjangFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  KeranjangFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  KeranjangFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  KeranjangFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  KeranjangFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  KeranjangFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  KeranjangFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  KeranjangField _setField(
      KeranjangField? field, String colName, DbType dbtype) {
    return KeranjangField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  KeranjangField? _id;
  KeranjangField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  KeranjangField? _namaMenu;
  KeranjangField get namaMenu {
    return _namaMenu = _setField(_namaMenu, 'namaMenu', DbType.text);
  }

  KeranjangField? _namaKategori;
  KeranjangField get namaKategori {
    return _namaKategori =
        _setField(_namaKategori, 'namaKategori', DbType.text);
  }

  KeranjangField? _hargaMenu;
  KeranjangField get hargaMenu {
    return _hargaMenu = _setField(_hargaMenu, 'hargaMenu', DbType.text);
  }

  KeranjangField? _gambarMenu;
  KeranjangField get gambarMenu {
    return _gambarMenu = _setField(_gambarMenu, 'gambarMenu', DbType.text);
  }

  KeranjangField? _jumlahItem;
  KeranjangField get jumlahItem {
    return _jumlahItem = _setField(_jumlahItem, 'jumlahItem', DbType.text);
  }

  /// Deletes List<Keranjang> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnKeranjang!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnKeranjang!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from keranjang ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnKeranjang!.updateBatch(qparams, values);
  }

  /// This method always returns [Keranjang] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Keranjang?
  @override
  Future<Keranjang?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnKeranjang!.toList(qparams);
    final data = await objFuture;
    Keranjang? obj;
    if (data.isNotEmpty) {
      obj = Keranjang.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Keranjang]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Keranjang?
  @override
  Future<Keranjang> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Keranjang();
  }

  /// This method returns int. [Keranjang]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? keranjangCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final keranjangsFuture = await _mnKeranjang!.toList(qparams);
    final int count = keranjangsFuture[0]['CNT'] as int;
    if (keranjangCount != null) {
      keranjangCount(count);
    }
    return count;
  }

  /// This method returns List<Keranjang> [Keranjang]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Keranjang>
  @override
  Future<List<Keranjang>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Keranjang> keranjangsData = await Keranjang.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return keranjangsData;
  }

  /// This method returns Json String [Keranjang]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Keranjang]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Keranjang]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnKeranjang!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Keranjang]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    retVal['sql'] = 'SELECT `id` FROM keranjang WHERE ${qparams.whereString}';
    retVal['args'] = qparams.whereArguments;
    return retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnKeranjang!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Keranjang]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnKeranjang!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Keranjang.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnKeranjang!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion KeranjangFilterBuilder

// region KeranjangFields
class KeranjangFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fNamaMenu;
  static TableField get namaMenu {
    return _fNamaMenu =
        _fNamaMenu ?? SqlSyntax.setField(_fNamaMenu, 'namaMenu', DbType.text);
  }

  static TableField? _fNamaKategori;
  static TableField get namaKategori {
    return _fNamaKategori = _fNamaKategori ??
        SqlSyntax.setField(_fNamaKategori, 'namaKategori', DbType.text);
  }

  static TableField? _fHargaMenu;
  static TableField get hargaMenu {
    return _fHargaMenu = _fHargaMenu ??
        SqlSyntax.setField(_fHargaMenu, 'hargaMenu', DbType.text);
  }

  static TableField? _fGambarMenu;
  static TableField get gambarMenu {
    return _fGambarMenu = _fGambarMenu ??
        SqlSyntax.setField(_fGambarMenu, 'gambarMenu', DbType.text);
  }

  static TableField? _fJumlahItem;
  static TableField get jumlahItem {
    return _fJumlahItem = _fJumlahItem ??
        SqlSyntax.setField(_fJumlahItem, 'jumlahItem', DbType.text);
  }
}
// endregion KeranjangFields

//region KeranjangManager
class KeranjangManager extends SqfEntityProvider {
  KeranjangManager()
      : super(DBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'keranjang';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion KeranjangManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await DBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await DBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await DBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class DBModelSequenceManager extends SqfEntityProvider {
  DBModelSequenceManager() : super(DBModel());
}
// END OF ENTITIES
